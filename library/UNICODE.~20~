(DEFINE-FILE-INFO READTABLE "INTERLISP" PACKAGE "INTERLISP")(FILECREATED "26-Jul-2020 17:58:32" {DSK}<Users>kaplan>Local>medley3.5>lispcore>library>UNICODE.;20 15690        changes to%:  (FNS SHOWCHARS \UTF16.BACKCHARFN MAKE-UTF16BE-FORMAT UTF16BE.OUTCHARFN                          UTF16BE.INCCODEFN UTF16BE.PEEKCCODEFN)                    (VARS UNICODECOMS)      previous date%: "26-Jul-2020 11:01:59" {DSK}<Users>kaplan>Local>medley3.5>lispcore>library>UNICODE.;14)(PRETTYCOMPRINT UNICODECOMS)(RPAQQ UNICODECOMS       [(FNS MAKE-UTF8-FORMAT UTF8.OUTCHARFN UTF8.INCCODEFN UTF8.PEEKCCODEFN \UTF8.BACKCHARFN)        (FNS MAKE-UTF16BE-FORMAT UTF16BE.OUTCHARFN UTF16BE.INCCODEFN UTF16BE.PEEKCCODEFN              \UTF16.BACKCHARFN)        (FNS SHOWCHARS)        (P (MAKE-UTF8-FORMAT)                      (* ;; "Big-endian")           (MAKE-UTF16BE-FORMAT))        (DECLARE%: EVAL@COMPILE DONTCOPY (P (EVAL (SYSRECLOOK1 'EXTERNALFORMAT])(DEFINEQ(MAKE-UTF8-FORMAT  [LAMBDA NIL                                           (* ; "Edited 26-Jul-2020 10:20 by rmk:")    (* ;; "EOL 1 is LF")    (\INSTALL.EXTERNALFORMAT :UTF8 (CREATE EXTERNALFORMAT                                          EOLVALID _ T                                          EOL _ 1                                          INCCODEFN _ (FUNCTION UTF8.INCCODEFN)                                          PEEKCCODEFN _ (FUNCTION UTF8.PEEKCCODEFN)                                          BACKCHARFN _ (FUNCTION \UTF8.BACKCHARFN)                                          FILEOUTCHARFN _ (FUNCTION UTF8.OUTCHARFN])(UTF8.OUTCHARFN  [LAMBDA (STREAM CHARCODE)                             (* ; "Edited 26-Jul-2020 10:49 by rmk:")                                                            (* ; "Edited 30-Jan-2020 23:08 by rmk:")    (* ;; "PRINT UTF8 sequence for CHARCODE.  .")    (IF (ILESSP CHARCODE 128)        THEN (\BOUT STREAM (CL:IF (EQ CHARCODE (CHARCODE EOL))                                   (CHARCODE LF)                                   CHARCODE))      ELSEIF (ILESSP CHARCODE 2048)        THEN                                             (* ; "x800")              (\BOUT STREAM (LOGOR (LLSH 3 6)                                   (LRSH CHARCODE 6)))              (\BOUT STREAM (LOGOR (LLSH 2 6)                                   (LOADBYTE CHARCODE 0 6)))      ELSEIF (ILESSP CHARCODE 65536)        THEN                                             (* ; "x10000")              (\BOUT STREAM (LOGOR (LLSH 7 5)                                   (LRSH CHARCODE 12)))              (\BOUT STREAM (LOGOR (LLSH 2 6)                                   (LOADBYTE CHARCODE 6 6)))              (\BOUT STREAM (LOGOR (LLSH 2 6)                                   (LOADBYTE CHARCODE 0 6)))      ELSEIF (ILESSP CHARCODE 2097152)        THEN                                             (* ; "x200000")              (\BOUT STREAM (LOGOR (LLSH 15 4)                                   (LRSH CHARCODE 18)))              (\BOUT STREAM (LOGOR (LLSH 2 6)                                   (LOADBYTE CHARCODE 12 6)))              (\BOUT STREAM (LOGOR (LLSH 2 6)                                   (LOADBYTE CHARCODE 6 6)))              (\BOUT STREAM (LOGOR (LLSH 2 6)                                   (LOADBYTE CHARCODE 0 6)))      ELSE (ERROR "CHARCODE too big for UTF8" CHARCODE])(UTF8.INCCODEFN  [LAMBDA (STREAM)                                      (* ; "Edited 26-Jul-2020 10:49 by rmk:")    (LET (BYTE1 BYTE2 BYTE3 BYTE4)         (SETQ BYTE1 (\BIN STREAM))         (* ;; "Distinguish on header bytex")         (IF (ILESSP BYTE1 128)             THEN                    (* ;; "Test first:  Ascii is the common case")                   BYTE1           ELSEIF (IGEQ BYTE1 (LLSH 15 4))             THEN                                        (* ; "4 bytes")                   (SETQ BYTE2 (\BIN STREAM))                   (CL:WHEN (ILESSP BYTE2 128)                       (ERROR "INVALID UTF8 SEQUENCE" (LIST BYTE1 BYTE2)))                   (SETQ BYTE3 (\BIN STREAM))                   (CL:WHEN (ILESSP BYTE3 128)                       (ERROR "INVALID UTF8 SEQUENCE" (LIST BYTE1 BYTE2 BYTE3)))                   (SETQ BYTE4 (\BIN STREAM))                   (CL:WHEN (ILESSP BYTE4 128)                       (ERROR "INVALID UTF8 SEQUENCE" (LIST BYTE1 BYTE2 BYTE3 BYTE4)))                   (LOGOR (LLSH (LOADBYTE BYTE1 0 3)                                18)                          (LLSH (LOADBYTE BYTE2 0 6)                                12)                          (LLSH (LOADBYTE BYTE3 0 6)                                6)                          (LOADBYTE BYTE4 0 6))           ELSEIF (IGEQ BYTE1 (LLSH 7 5))             THEN                                        (* ; "3 bytes")                   (SETQ BYTE2 (\BIN STREAM))                   (CL:WHEN (ILESSP BYTE2 128)                       (ERROR "INVALID UTF8 SEQUENCE" (LIST BYTE1 BYTE2)))                   (SETQ BYTE3 (\BIN STREAM))                   (CL:WHEN (ILESSP BYTE3 128)                       (ERROR "INVALID UTF8 SEQUENCE" (LIST BYTE1 BYTE2 BYTE3)))                   (LOGOR (LLSH (LOADBYTE BYTE1 0 4)                                12)                          (LLSH (LOADBYTE BYTE2 0 6)                                6)                          (LOADBYTE BYTE3 0 6))           ELSE                                          (* ; "Must be 2 bytes")                 (SETQ BYTE2 (\BIN STREAM))                 (CL:WHEN (ILESSP BYTE2 128)                     (ERROR "INVALID UTF8 SEQUENCE" (LIST BYTE1 BYTE2)))                 (LOGOR (LLSH (LOADBYTE BYTE1 0 5)                              6)                        (LOADBYTE BYTE2 0 6])(UTF8.PEEKCCODEFN  [LAMBDA (STREAM NOERROR COUNTP)                       (* ; "Edited 26-Jul-2020 10:50 by rmk:")    (* ;; "Modeled this after \EUCPEEK on LLREAD.  In the multi-byte (non-ASCII) case, backs the file pointer to the beginning by the proper number of \BACKFILEPTRs, and returns a count of 0.  Returns NIL if NOERROR and either invalid UTF8 or end of file.")    (* ;; "Could be that the caller takes care of backing up the file position if the number of binned-bytes is returned.")    (PROG (BYTE1 BYTE2 BYTE3 BYTE4 CODE)          (SETQ BYTE1 (\PEEKBIN STREAM NOERROR))     (* ;; "Distinguish on header bytex")          (CL:UNLESS BYTE1              (RETURN (AND COUNTP (CL:VALUES NIL 0))))          [IF (ILESSP BYTE1 128)              THEN                     (* ;;                   "Test first:  Ascii is the common case.  No need to back up, since we peeked.")                    (SETQ CODE BYTE1)            ELSEIF (IGEQ BYTE1 (LLSH 15 4))              THEN                                       (* ; "4 bytes")                    (\BIN STREAM)                    (CL:UNLESS (AND (SETQ BYTE2 (\PEEKBIN STREAM NOERROR))                                    (IGEQ BYTE2 128))                        (\BACKFILEPTR STREAM)                        (OR NOERROR (ERROR "INVALID UTF8 SEQUENCE" (LIST BYTE1 BYTE2)))                        (RETURN (IF COUNTP                                    THEN (CL:VALUES CODE 0)                                  ELSE CODE)))                    (\BIN STREAM)                    (CL:UNLESS (AND (SETQ BYTE3 (\PEEKBIN STREAM NOERROR))                                    (IGEQ BYTE3 128))                        (\BACKFILEPTR STREAM)                        (\BACKFILEPTR STREAM)                        (OR NOERROR (ERROR "INVALID UTF8 SEQUENCE" (LIST BYTE1 BYTE2 BYTE3)))                        (RETURN (IF COUNTP                                    THEN (CL:VALUES CODE 0)                                  ELSE CODE)))                    (\BIN STREAM)                    (SETQ BYTE4 (\PEEKBIN STREAM NOERROR))   (* ;                                                            "PEEK the last, no need to back it up")                    (\BACKFILEPTR STREAM)                    (\BACKFILEPTR STREAM)                    (\BACKFILEPTR STREAM)                    (IF (AND BYTE4 (IGEQ BYTE4 128))                        THEN (SETQ CODE (LOGOR (LLSH (LOADBYTE BYTE1 0 3)                                                         18)                                                   (LLSH (LOADBYTE BYTE2 0 6)                                                         12)                                                   (LLSH (LOADBYTE BYTE3 0 6)                                                         6)                                                   (LOADBYTE BYTE4 0 6)))                      ELSEIF NOERROR                      ELSE (ERROR "INVALID UTF8 SEQUENCE" (LIST BYTE1 BYTE2 BYTE3 BYTE4)))            ELSEIF (IGEQ BYTE1 (LLSH 7 5))              THEN                                       (* ; "3 bytes")                    (\BIN STREAM)                    (CL:UNLESS (AND (SETQ BYTE2 (\PEEKBIN STREAM NOERROR))                                    (IGEQ BYTE2 128))                        (\BACKFILEPTR STREAM)                        (OR NOERROR (ERROR "INVALID UTF8 SEQUENCE" (LIST BYTE1 BYTE2)))                        (RETURN (IF COUNTP                                    THEN (CL:VALUES CODE 0)                                  ELSE CODE)))                    (\BIN STREAM)                    (SETQ BYTE3 (\PEEKBIN STREAM NOERROR))                    (\BACKFILEPTR STREAM)                    (\BACKFILEPTR STREAM)                    (IF (AND BYTE3 (IGEQ BYTE3 128))                        THEN (SETQ CODE (LOGOR (LLSH (LOADBYTE BYTE1 0 4)                                                         12)                                                   (LLSH (LOADBYTE BYTE2 0 6)                                                         6)                                                   (LOADBYTE BYTE3 0 6)))                      ELSEIF NOERROR                      ELSE (ERROR "INVALID UTF8 SEQUENCE" (LIST BYTE1 BYTE2 BYTE3)))            ELSE                                         (* ; "Must be 2 bytes")                  (\BIN STREAM)                  (SETQ BYTE2 (\PEEKBIN STREAM NOERROR))                  (\BACKFILEPTR STREAM)                  (IF (AND BYTE2 (IGEQ BYTE2 128))                      THEN (SETQ CODE (LOGOR (LLSH (LOADBYTE BYTE1 0 5)                                                       6)                                                 (LOADBYTE BYTE2 0 6)))                    ELSEIF NOERROR                    ELSE (ERROR "INVALID UTF8 SEQUENCE" (LIST BYTE1 BYTE2]          (RETURN (IF COUNTP                      THEN (CL:VALUES CODE 0)                    ELSE CODE])(\UTF8.BACKCHARFN  [LAMBDA (STREAM COUNTP)                               (* ; "Edited 26-Jul-2020 10:41 by rmk:")    (* ;; "\BACKFILEPTR is NIL at beginning of FILE, just return COUNT")    (BIND (C _ 0) WHILE (CL:WHEN (\BACKFILEPTR STREAM)                                    (ADD C 1)                                    (EQ 2 (LRSH (\PEEKBIN STREAM)                                                6))) REPEATUNTIL (EQ C 4)       FINALLY (RETURN (AND COUNTP C]))(DEFINEQ(MAKE-UTF16BE-FORMAT  [LAMBDA NIL                                           (* ; "Edited 26-Jul-2020 13:06 by rmk:")    (\INSTALL.EXTERNALFORMAT :UTF16BE (CREATE EXTERNALFORMAT                                             INCCODEFN _ (FUNCTION UTF16BE.INCCODEFN)                                             PEEKCCODEFN _ (FUNCTION UTF16BE.PEEKCCODEFN)                                             BACKCHARFN _ (FUNCTION \UTF16.BACKCHARFN)                                             FILEOUTCHARFN _ (FUNCTION UTF16BE.OUTCHARFN])(UTF16BE.OUTCHARFN  [LAMBDA (STREAM CHARCODE)                             (* ; "Edited 26-Jul-2020 10:48 by rmk:")                                                            (* ; "Edited 30-Jan-2020 23:08 by rmk:")    (* ;; "PRINT UTF16 sequence for CHARCODE.  .")    (\BOUT STREAM (LRSH CHARCODE 8))    (\BOUT STREAM (LOGAND CHARCODE 255])(UTF16BE.INCCODEFN  [LAMBDA (STREAM)                                      (* ; "Edited 26-Jul-2020 10:51 by rmk:")    (LOGOR (LLSH (\BIN STREAM)                 8)           (\BIN STREAM])(UTF16BE.PEEKCCODEFN  [LAMBDA (STREAM NOERROR COUNTP)                       (* ; "Edited 26-Jul-2020 10:58 by rmk:")    (* ;; "Could be that the caller takes care of backing up the file position if the number of binned-bytes is returned.")    (LET (BYTE1 BYTE2 CODE)         (SETQ BYTE1 (\PEEKBIN STREAM NOERROR))         (IF BYTE1             THEN (\BIN STREAM)                   (SETQ BYTE2 (\PEEKBIN STREAM NOERROR))                   (\BACKFILEPTR STREAM)                   (IF BYTE2                       THEN (SETQ CODE (LOGOR (LLSH BYTE1 8)                                                  BYTE2))                             (CL:IF COUNTP                                 (CL:VALUES CODE 0)                                 CODE)                     ELSEIF NOERROR                     ELSE (AND COUNTP (CL:VALUES NIL 0)))           ELSEIF NOERROR             THEN (AND COUNTP (CL:VALUES NIL 0))           ELSE (ERROR "INVALID UTF16 CHARACTER" (LIST BYTE1 BYTE2])(\UTF16.BACKCHARFN  [LAMBDA (STREAM COUNTP)                               (* ; "Edited 26-Jul-2020 13:05 by rmk:")    (* ;; "\BACKFILEPTR is NIL at beginning of FILE, just return COUNT.")    (* ;; "Common for big-ending and little-ending")    (IF (NOT (\BACKFILEPTR STREAM))        THEN (AND COUNTP 0)      ELSEIF (\BACKFILEPTR STREAM)        THEN (AND COUNTP 2)      ELSE (AND COUNTP 1]))(DEFINEQ(SHOWCHARS  [LAMBDA (FROMCHAR TOCHAR FONT)                        (* ; "Edited 26-Jul-2020 17:58 by rmk:")    (RESETFORM (DSPFONT (OR FONT '(CLASSIC 12))                      T)           (CL:WHEN (AND (SMALLP FROMCHAR)                         (NOT TOCHAR))               (* ;;     "If a small number, assume it's an octal (in decimal) character set, no need for string quotes")               (SETQ TOCHAR (CONCAT FROMCHAR "," 376))               (SETQ FROMCHAR (CONCAT FROMCHAR "," 41)))           (CL:UNLESS (SMALLP FROMCHAR)               (SETQ FROMCHAR (CHARCODE.DECODE FROMCHAR)))           (CL:UNLESS (SMALLP TOCHAR)               (SETQ TOCHAR (CL:IF TOCHAR                                (CHARCODE.DECODE TOCHAR)                                FROMCHAR)))           (FOR C FROM FROMCHAR TO TOCHAR UNLESS (AND (IGEQ (LOGAND C 255)                                                                            127)                                                                      (ILEQ (LOGAND C 255)                                                                            (PLUS 128 33)))              DO (PRINTOUT T .P2 (CHARCODESTRING C)                            10                            (CHARACTER C)                            T]))(MAKE-UTF8-FORMAT)(* ;; "Big-endian")(MAKE-UTF16BE-FORMAT)(DECLARE%: EVAL@COMPILE DONTCOPY (EVAL (SYSRECLOOK1 'EXTERNALFORMAT)))(DECLARE%: DONTCOPY  (FILEMAP (NIL (975 11563 (MAKE-UTF8-FORMAT 985 . 1641) (UTF8.OUTCHARFN 1643 . 3501) (UTF8.INCCODEFN 3503 . 5945) (UTF8.PEEKCCODEFN 5947 . 11054) (\UTF8.BACKCHARFN 11056 . 11561)) (11564 14187 (MAKE-UTF16BE-FORMAT 11574 . 12122) (UTF16BE.OUTCHARFN 12124 . 12495) (UTF16BE.INCCODEFN 12497 . 12701) (UTF16BE.PEEKCCODEFN 12703 . 13744) (\UTF16.BACKCHARFN 13746 . 14185)) (14188 15515 (SHOWCHARS 14198 . 15513)))))STOP