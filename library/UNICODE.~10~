(DEFINE-FILE-INFO READTABLE "INTERLISP" PACKAGE "INTERLISP")(FILECREATED "25-Jul-2020 22:27:26" {DSK}<Users>kaplan>Local>medley3.5>lispcore>library>UNICODE.;10 10303        changes to%:  (VARS UNICODECOMS)                    (FNS UTF8.PEEKCCODEFN MAKE-UTF8-FORMAT UTF8.INCCODEFN UTF8.OUTCHARFN)      previous date%: "25-Jul-2020 18:41:52" {DSK}<Users>kaplan>Local>medley3.5>lispcore>library>UNICODE.;6)(PRETTYCOMPRINT UNICODECOMS)(RPAQQ UNICODECOMS [(FNS MAKE-UTF8-FORMAT UTF8.OUTCHARFN UTF8.INCCODEFN UTF8.PEEKCCODEFN)                        (P (MAKE-UTF8-FORMAT))                        (DECLARE%: EVAL@COMPILE DONTCOPY (P (EVAL (SYSRECLOOK1 'EXTERNALFORMAT])(DEFINEQ(MAKE-UTF8-FORMAT  [LAMBDA NIL                                           (* ; "Edited 25-Jul-2020 22:13 by rmk:")    (* ;; "EOL 1 is LF")    (\INSTALL.EXTERNALFORMAT :UTF8 (CREATE EXTERNALFORMAT                                          EOLVALID _ T                                          EOL _ 1                                          INCCODEFN _ (FUNCTION UTF8.INCCODEFN)                                          PEEKCCODEFN _ (FUNCTION UTF8.PEEKCCODEFN)                                          BACKCHARFN _ (FUNCTION \UTF8.BACKCHAR)                                          FILEOUTCHARFN _ (FUNCTION UTF8.OUTCHARFN])(UTF8.OUTCHARFN  [LAMBDA (STREAM CHARCODE)                             (* ; "Edited 25-Jul-2020 21:11 by rmk:")                                                            (* ; "Edited 30-Jan-2020 23:08 by rmk:")    (* ;; "PRINT UTF8 sequence for CHARCODE.  .")    (LET [(STRM (\GETSTREAM STREAM 'OUTPUT]                  (* ; "Output raw bytes")         (IF (ILESSP CHARCODE 128)             THEN (\BOUT STRM (CL:IF (EQ CHARCODE (CHARCODE EOL))                                      (CHARCODE LF)                                      CHARCODE))           ELSEIF (ILESSP CHARCODE 2048)             THEN                                        (* ; "x800")                   (\BOUT STRM (LOGOR (LLSH 3 6)                                      (LRSH CHARCODE 6)))                   (\BOUT STRM (LOGOR (LLSH 2 6)                                      (LOADBYTE CHARCODE 0 6)))           ELSEIF (ILESSP CHARCODE 65536)             THEN                                        (* ; "x10000")                   (\BOUT STRM (LOGOR (LLSH 7 5)                                      (LRSH CHARCODE 12)))                   (\BOUT STRM (LOGOR (LLSH 2 6)                                      (LOADBYTE CHARCODE 6 6)))                   (\BOUT STRM (LOGOR (LLSH 2 6)                                      (LOADBYTE CHARCODE 0 6)))           ELSEIF (ILESSP CHARCODE 2097152)             THEN                                        (* ; "x200000")                   (\BOUT STRM (LOGOR (LLSH 15 4)                                      (LRSH CHARCODE 18)))                   (\BOUT STRM (LOGOR (LLSH 2 6)                                      (LOADBYTE CHARCODE 12 6)))                   (\BOUT STRM (LOGOR (LLSH 2 6)                                      (LOADBYTE CHARCODE 6 6)))                   (\BOUT STRM (LOGOR (LLSH 2 6)                                      (LOADBYTE CHARCODE 0 6)))           ELSE (ERROR "CHARCODE too big for UTF8" CHARCODE])(UTF8.INCCODEFN  [LAMBDA (STREAM)                                      (* ; "Edited 25-Jul-2020 22:12 by rmk:")    (LET ((STRM (\GETSTREAM STREAM 'INPUT))          BYTE1 BYTE2 BYTE3 BYTE4)         (SETQ BYTE1 (\BIN STRM))         (* ;; "Distinguish on header bytex")         (IF (ILESSP BYTE1 128)             THEN                    (* ;; "Test first:  Ascii is the common case")                   BYTE1           ELSEIF (IGEQ BYTE1 (LLSH 15 4))             THEN                                        (* ; "4 bytes")                   (SETQ BYTE2 (\BIN STRM))                   (CL:WHEN (ILESSP BYTE2 128)                       (ERROR "INVALID UTF8 SEQUENCE" (LIST BYTE1 BYTE2)))                   (SETQ BYTE3 (\BIN STRM))                   (CL:WHEN (ILESSP BYTE3 128)                       (ERROR "INVALID UTF8 SEQUENCE" (LIST BYTE1 BYTE2 BYTE3)))                   (SETQ BYTE4 (\BIN STRM))                   (CL:WHEN (ILESSP BYTE4 128)                       (ERROR "INVALID UTF8 SEQUENCE" (LIST BYTE1 BYTE2 BYTE3 BYTE4)))                   (LOGOR (LLSH (LOADBYTE BYTE1 0 3)                                18)                          (LLSH (LOADBYTE BYTE2 0 6)                                12)                          (LLSH (LOADBYTE BYTE3 0 6)                                6)                          (LOADBYTE BYTE4 0 6))           ELSEIF (IGEQ BYTE1 (LLSH 7 5))             THEN                                        (* ; "3 bytes")                   (SETQ BYTE2 (\BIN STRM))                   (CL:WHEN (ILESSP BYTE2 128)                       (ERROR "INVALID UTF8 SEQUENCE" (LIST BYTE1 BYTE2)))                   (SETQ BYTE3 (\BIN STRM))                   (CL:WHEN (ILESSP BYTE3 128)                       (ERROR "INVALID UTF8 SEQUENCE" (LIST BYTE1 BYTE2 BYTE3)))                   (LOGOR (LLSH (LOADBYTE BYTE1 0 4)                                12)                          (LLSH (LOADBYTE BYTE2 0 6)                                6)                          (LOADBYTE BYTE3 0 6))           ELSE                                          (* ; "Must be 2 bytes")                 (SETQ BYTE2 (\BIN STRM))                 (CL:WHEN (ILESSP BYTE2 128)                     (ERROR "INVALID UTF8 SEQUENCE" (LIST BYTE1 BYTE2)))                 (LOGOR (LLSH (LOADBYTE BYTE1 0 5)                              6)                        (LOADBYTE BYTE2 0 6])(UTF8.PEEKCCODEFN  [LAMBDA (STREAM NOERROR COUNTP)                       (* ; "Edited 25-Jul-2020 22:21 by rmk:")    (* ;; "Not sure what COUNTP does, or if it conflicts with the SETFILEPTR.  Maybe only relevant if piggy backing on some variant of an XNS-format encoding.")    (LET ((STRM (\GETSTREAM STREAM 'INPUT))          BYTE1 BYTE2 BYTE3 BYTE4 CODE COUNT (STARTPOS (GETFILEPTR STREAM)))         (SETQ BYTE1 (\PEEKBIN STRM NOERROR))         (* ;; "Distinguish on header bytex")         (IF (ILESSP BYTE1 128)             THEN                    (* ;; "Test first:  Ascii is the common case")                   (SETQ COUNT 1)                   (SETQ CODE BYTE1)           ELSE (SETQ STARTPOS (SUB1 (GETFILEPTR STREAM)))                                                              (* ; "Not needed if 1-byte peek")                 [SETQ CODE (IF (IGEQ BYTE1 (LLSH 15 4))                                THEN                     (* ; "4 bytes")                                      (\BIN STRM)                                      (SETQ BYTE2 (\PEEKBIN STRM NOERROR))                                      (CL:WHEN (ILESSP BYTE2 128)                                          (ERROR "INVALID UTF8 SEQUENCE" (LIST BYTE1 BYTE2)))                                      (\BIN STRM)                                      (SETQ BYTE3 (\PEEKBIN STRM NOERROR))                                      (CL:WHEN (ILESSP BYTE3 128)                                          (ERROR "INVALID UTF8 SEQUENCE" (LIST BYTE1 BYTE2 BYTE3)))                                      (\BIN STRM)                                      (SETQ BYTE4 (\PEEKBIN STRM NOERROR))                                      (CL:WHEN (ILESSP BYTE4 128)                                          (ERROR "INVALID UTF8 SEQUENCE" (LIST BYTE1 BYTE2 BYTE3                                                                                BYTE4)))                                      (SETQ COUNT 1)                                      (LOGOR (LLSH (LOADBYTE BYTE1 0 3)                                                   18)                                             (LLSH (LOADBYTE BYTE2 0 6)                                                   12)                                             (LLSH (LOADBYTE BYTE3 0 6)                                                   6)                                             (LOADBYTE BYTE4 0 6))                              ELSEIF (IGEQ BYTE1 (LLSH 7 5))                                THEN                     (* ; "3 bytes")                                      (\BIN STRM)                                      (SETQ BYTE2 (\PEEKBIN STRM NOERROR))                                      (CL:WHEN (ILESSP BYTE2 128)                                          (ERROR "INVALID UTF8 SEQUENCE" (LIST BYTE1 BYTE2)))                                      (\BIN STRM)                                      (SETQ BYTE3 (\PEEKBIN STRM NOERROR))                                      (CL:WHEN (ILESSP BYTE3 128)                                          (ERROR "INVALID UTF8 SEQUENCE" (LIST BYTE1 BYTE2 BYTE3)))                                      (SETQ COUNT 3)                                      (LOGOR (LLSH (LOADBYTE BYTE1 0 4)                                                   12)                                             (LLSH (LOADBYTE BYTE2 0 6)                                                   6)                                             (LOADBYTE BYTE3 0 6))                              ELSE                       (* ; "Must be 2 bytes")                                    (\BIN STRM)                                    (SETQ BYTE2 (\PEEKBIN STRM NOERROR))                                    (CL:WHEN (ILESSP BYTE2 128)                                        (ERROR "INVALID UTF8 SEQUENCE" (LIST BYTE1 BYTE2)))                                    (SETQ COUNT 2)                                    (LOGOR (LLSH (LOADBYTE BYTE1 0 5)                                                 6)                                           (LOADBYTE BYTE2 0 6]                 (SETFILEPTR STREAM STARTPOS))         (IF COUNTP             THEN (CL:VALUES CODE COUNT)           ELSE CODE]))(MAKE-UTF8-FORMAT)(DECLARE%: EVAL@COMPILE DONTCOPY (EVAL (SYSRECLOOK1 'EXTERNALFORMAT)))(DECLARE%: DONTCOPY  (FILEMAP (NIL (689 10182 (MAKE-UTF8-FORMAT 699 . 1353) (UTF8.OUTCHARFN 1355 . 3391) (UTF8.INCCODEFN 3393 . 5865) (UTF8.PEEKCCODEFN 5867 . 10180)))))STOP