(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)(FILECREATED " 8-Sep-2020 23:52:06" {DSK}<Users>kaplan>Local>medley3.5>lispcore>lispusers>COMPAREDIRECTORIES.;210 47388        changes to%:  (FNS FIND-SOURCE-FILES FIND-UNSOURCED-CFILES FIND-COMPILED-FILES SOURCEFORCFILEP)      previous date%: " 8-Sep-2020 21:08:13" {DSK}<Users>kaplan>Local>medley3.5>lispcore>lispusers>COMPAREDIRECTORIES.;206)(* ; "Copyright (c) 1985, 1986, 1987, 1988, 1990, 1994, 1998, 2018, 2020 by Venue & Xerox Corporation.  All rights reserved.")(PRETTYCOMPRINT COMPAREDIRECTORIESCOMS)(RPAQQ COMPAREDIRECTORIESCOMS       (        (* ;; "Compare the contents of two directories.")        (FNS COMPAREDIRECTORIES CDFILES COMPAREDIRECTORIES.INFOS MATCHNAME)        (FNS CDPRINT COMPAREDIRECTORIES.PRINTLINE)        (FNS CDMAP CDENTRY CDSUBSET)        (FNS BINCOMP EOLTYPE)        (RECORDS CDENTRY CDINFO)                (* ;; "look for compiled files older than the sources")        (FNS FIND-UNCOMPILED-FILES FIND-UNSOURCED-CFILES FIND-SOURCE-FILES FIND-COMPILED-FILES)        (FNS CREATED-AS SOURCEFORCFILEP)        (FNS FIX-DIRECTORY-DATES FIX-EQUIV-DATES COPY-COMPARED-FILES COPY-MISSING-FILES              COMPILED-ON-SAME-SOURCE)        [VARS (ONESECOND (IDIFFERENCE (IDATE "1-Jan-2020 12:00:01")                                (IDATE "1-Jan-2020 12:00:00"]        (INITVARS (LASTCDENTRIES NIL))        (COMS (FNS COMPARE-ENTRY-SOURCE-FILES)              (FILES COMPARESOURCES))))(* ;; "Compare the contents of two directories.")(DEFINEQ(COMPAREDIRECTORIES  [LAMBDA (DIR1 DIR2 SELECT FILEPATTERNS EXTENSIONSTOAVOID USEDIRECTORYDATE OUTPUTFILE VERSIONS)                                                            (* ; "Edited  7-Sep-2020 09:23 by rmk:")    (* ;; "Compare the contents of two directories, e.g., for change-control purposes.  Compares files matching FILEPATTERN (or *.*;) on DIR1 and DIR2, listing which is newer, or when one is not found on the other.  If SELECT is or contains SAME/=, BEFORE/<, AFTER/>, then files where DIR1 is the same as, earlier than, or later than DIR2 are selected. SELECT= NIL is the same as (<  >), T is the same as (< > =).  Also allows selection based on file-length criteria.")    (* ;; "")    (* ;; "Unless USEDIRECTORYDATE, comparison is with respect to the the LISP filecreated dates if evailable.")    (* ;; "")    (* ;; "If OUTPUTFILE is NIL, the list of compared entries is returned.  Otherwise the selected entries are printed on OUTPUTFILE (T for the display).")    [SETQ SELECT (SELECTQ SELECT                     (NIL '(< > -* *-))                     (T '(< > -* *- =))                     (FOR S IN (MKLIST SELECT) COLLECT (SELECTQ S                                                                       ((AFTER >)                                                                             '>)                                                                       ((BEFORE <)                                                                             '<)                                                                       ((SAME SAMEDATE =)                                                                             '=)                                                                       (AUTHOR 'AUTHOR)                                                                       (-* '-*)                                                                       (*- '*-)                                                                       (ERROR                                                                       "UNRECOGNIZED SELECT PARAMETER"                                                                              S]    (PROG (INFOS1 INFOS2 CANDIDATES SELECTED COMPAREDATE)          [SETQ COMPAREDATE (INTERSECTION SELECT '(< > =]     (* ;; "DIRECTORYNAME here to get unrelativized specifications for header.")          (SETQ DIR1 (OR (DIRECTORYNAME (OR DIR1 T))                         (ERROR "DIRECTORY DOES NOT EXIST" DIR1)))          (SETQ DIR2 (OR (DIRECTORYNAME (OR DIR2 T))                         (ERROR "DIRECTORY DOES NOT EXIST" DIR2)))          (PRINTOUT T "Comparing " DIR1 6 "vs. " DIR2 T "as of " (DATE)                 " selecting " SELECT " ... ")          (SETQ INFOS1 (COMPAREDIRECTORIES.INFOS (CDFILES DIR1 FILEPATTERNS EXTENSIONSTOAVOID                                                            VERSIONS)                              USEDIRECTORYDATE VERSIONS))          (SETQ INFOS2 (COMPAREDIRECTORIES.INFOS (CDFILES DIR2 FILEPATTERNS EXTENSIONSTOAVOID                                                            VERSIONS)                              USEDIRECTORYDATE))          (CL:UNLESS (AND INFOS2 INFOS1)                 (RETURN))     (* ;; "At this point the CAR of each info is the atomic match-name. Peel it off to produce candidate entries")          [SETQ CANDIDATES (FOR I1 IN INFOS1 COLLECT (LIST (CAR I1)                                                                       (CDR I1)                                                                       (CDR (ASSOC (CAR I1)                                                                                   INFOS2]     (* ;; "Could be some 2's without 1's")          (SORT [NCONC CANDIDATES (FOR I2 IN INFOS2 UNLESS (ASSOC (CAR I2)                                                                              CANDIDATES)                                     COLLECT (LIST (CAR I2)                                                       NIL                                                       (CDR I2]                T)     (* ;; "CANDIDATES is now a sorted list of the form (matchname entry1 entry2) where an entry consists of (fullname date length author)")     (* ;; "Do the SELECT filtering and insert the date relation.")          [SETQ SELECTED           (FOR C MATCHNAME INFO1 INFO2 IDATE1 IDATE2 DATEREL IN CANDIDATES              EACHTIME (SETQ MATCHNAME (POP C))                    (SETQ INFO1 (POP C))                    (SETQ INFO2 (POP C))                    (IF (AND INFO1 INFO2)                        THEN (SETQ IDATE1 (IDATE (FETCH DATE OF INFO1)))                              (SETQ IDATE2 (IDATE (FETCH DATE OF INFO2)))                              (SETQ DATEREL (IF (IGREATERP IDATE1 IDATE2)                                                THEN '>                                              ELSEIF (ILESSP IDATE1 IDATE2)                                                THEN '<                                              ELSE '=))                      ELSE                             (* ;; "Just for printing--no comparison")                            (SETQ DATEREL '*))              WHEN (IF (AND INFO1 INFO2)                           THEN (OR (NULL COMPAREDATE)                                        (SELECTQ DATEREL                                            (> (MEMB '> SELECT))                                            (< (MEMB '< SELECT))                                            (= (MEMB '= SELECT))                                            (SHOULDNT)))                         ELSEIF INFO1                           THEN                                  (* ;; "OK if INFO2 is missing?")                                 (MEMB '*- SELECT)                         ELSE                                (* ;; "OK if INFO1 is missing?")                               (MEMB '-* SELECT))              COLLECT (CREATE CDENTRY                                 MATCHNAME _ MATCHNAME                                 INFO1 _ INFO1                                 DATEREL _ DATEREL                                 INFO2 _ INFO2                                 EQUIV _ (CL:UNLESS (EQ DATEREL '*)                                             (CL:WHEN (BINCOMP (FETCH FULLNAME OF INFO1)                                                             (FETCH FULLNAME OF INFO2))                                                    'EQUIVALENT))]          (PRINTOUT T (LENGTH SELECTED)                 " entries" T)          (PUSH SELECTED (LIST DIR1 DIR2 SELECT (DATE)))          (SETQ LASTCDENTRIES SELECTED)          (CL:UNLESS OUTPUTFILE (RETURN SELECTED))          (RETURN (CDPRINT SELECTED OUTPUTFILE (MEMB 'AUTHOR SELECT SELECT])(CDFILES  [LAMBDA (DIR FILEPATTERNS EXTENSIONSTOAVOID VERSIONS) (* ; "Edited  7-Sep-2020 09:34 by rmk:")    (* ;; "Returns a list of fullnames for files that satisfy the criteria")    (* ;; "For each name returned by (DIRECTORY DIR), assumes that FILEPATTERNS applies to the suffix after the directory (i.e. after NAMEPOS).  That includes possibly subdirectories, dotted files in ultimate file names, and versions.")    (* ;; "     Exclude subdirectories unless FILEPATTERNS includes *>*")    (* ;; "     Exclude dotted files (.xxx) unless FILEPATTERNS includes .*")    (* ;; "     Exclude files with extensions in EXTENSIONSTOAVOID (*=NIL does no filtering)")    (* ;; "     Exclude older versions unless VERSIONS=T")    (* ;; "")    (* ;; "Resolve relative directories, so we can suppress subdirectory matches.   ")    (SETQ DIR (DIRECTORYNAME (OR DIR T)))    (SETQ EXTENSIONSTOAVOID (MKLIST EXTENSIONSTOAVOID))    (SETQ FILEPATTERNS (MKLIST FILEPATTERNS))    (FOR FULLNAME SUFFIX NAME EXT (NAMEPOS _ (ADD1 (NCHARS DIR)))       IN (DIRECTORY (CL:IF VERSIONS                             DIR                             (PACKFILENAME.STRING 'DIRECTORY DIR 'BODY "*.*;")))       EACHTIME [SETQ SUFFIX (SUBSTRING FULLNAME NAMEPOS NIL (CONSTANT (CONCAT]             (SETQ EXT (FILENAMEFIELD SUFFIX 'EXTENSION))             (SETQ NAME (FILENAMEFIELD SUFFIX 'NAME))              (* ;; "A dotted file looks like an extension without a name.  Pack the dot back on")             (CL:UNLESS NAME                 (SETQ NAME (PACK* '%. EXT))                 (SETQ EXT NIL)) UNLESS [OR (AND (STRPOS ">" SUFFIX)                                                     (NOT (MEMB '*>* FILEPATTERNS)))                                                (AND EXT (OR (MEMB '* EXTENSIONSTOAVOID)                                                             (MEMB EXT EXTENSIONSTOAVOID)))                                                (AND (EQ (CHARCODE %.)                                                         (CHCON1 NAME))                                                     (NOT (MEMB '.* FILEPATTERNS] COLLECT                                                                                         FULLNAME       FINALLY (CL:UNLESS $$VAL (PRINTOUT T "No relevant files in " DIR T])(COMPAREDIRECTORIES.INFOS  [LAMBDA (FILES USEDIRECTORYDATE)                      (* ; "Edited  7-Sep-2020 09:25 by rmk:")    (* ;; "Value is a list of CDINFOS with the match-name consed on to the front")    (FOR FULLNAME TYPE LDATE IN FILES       COLLECT              (* ;; "GDATE/IDATE in case Y2K")             (SETQ LDATE (FILEDATE FULLNAME))                (* ; "Is it a Lisp file?")             (CONS (MATCHNAME FULLNAME)                   (CREATE CDINFO                          FULLNAME _ FULLNAME                          DATE _ [GDATE (IDATE (IF USEDIRECTORYDATE                                                   THEN (GETFILEINFO FULLNAME 'CREATIONDATE)                                                 ELSEIF (OR LDATE (GETFILEINFO FULLNAME                                                                             'CREATIONDATE]                          LENGTH _ (GETFILEINFO FULLNAME 'LENGTH)                          AUTHOR _ (GETFILEINFO FULLNAME 'AUTHOR)                          TYPE _ (IF LDATE                                     THEN (CL:IF (MEMB (FILENAMEFIELD FULLNAME 'EXTENSION)                                                           *COMPILED-EXTENSIONS*)                                                  'COMPILED                                                  'SOURCE)                                   ELSE (PRINTFILETYPE FULLNAME])(MATCHNAME  [LAMBDA (NAME)                                        (* ; "Edited  5-Sep-2020 13:41 by rmk:")    (* ;; "The NAME.DIR for matching related files")    (LET ((M (PACKFILENAME 'HOST NIL 'VERSION NIL 'DIRECTORY NIL 'BODY NAME)))         (* ;; "Strip off the nuisance period")         (CL:IF (EQ (CHARCODE %.)                    (NTHCHARCODE M -1))             (SUBATOM M 1 -2)             M)]))(DEFINEQ(CDPRINT  [LAMBDA (CDENTRIES FILE PRINTAUTHOR)                  (* ; "Edited  5-Sep-2020 21:59 by rmk:")    (* ;; "Typically CDENTRIES will have a header.  If not, we fake one up, at least for the directories and today's date.")    (CL:UNLESS CDENTRIES        (PRINTOUT T T "Note:  Using LASTCDENTRIES" T T)        (SETQ CDENTRIES LASTCDENTRIES))    (RESETLST        (LET (INFO1 TEXT STREAM DATE1POS ENDDATE1 DIR1 DIR2 (HEADER (CAR CDENTRIES)))             (CL:UNLESS (STRINGP (CADR HEADER))                 (SETQ HEADER (LIST [FOR E IN CDENTRIES WHEN (FETCH INFO1                                                                            OF E)                                       DO (RETURN (PACKFILENAME 'NAME NIL 'EXTENSION NIL                                                             'VERSION NIL 'BODY                                                             (FETCH FULLNAME                                                                OF (FETCH INFO1 OF E]                                    [FOR E IN CDENTRIES WHEN (FETCH INFO2                                                                            OF E)                                       DO (RETURN (PACKFILENAME 'NAME NIL 'EXTENSION NIL                                                             'VERSION NIL 'BODY                                                             (FETCH FULLNAME                                                                OF (FETCH INFO2 OF E]                                    NIL                                    (DATE)))                 (PUSH CDENTRIES HEADER))             (SETQ DIR1 (CAR HEADER))             (SETQ DIR2 (CADR HEADER))             (CL:UNLESS (SETQ STREAM (GETSTREAM FILE 'OUTPUT T))                 [RESETSAVE (SETQ STREAM (OPENSTREAM (PACKFILENAME 'EXTENSION 'TXT 'BODY FILE)                                                'OUTPUT                                                'NEW))                        '(PROGN (CLOSEF? OLDVALUE])             (CL:WHEN DIR1                 (PRINTOUT STREAM "Comparing " DIR1 6 "vs. " DIR2 T "as of " (CADDDR HEADER))                 (CL:WHEN (CADDR HEADER)                     (PRINTOUT STREAM " selecting " (CADDR HEADER)))                 (PRINTOUT STREAM -2 (LENGTH (CDR CDENTRIES))                        " entries" T T))             (LINELENGTH 1000 STREAM)                        (* ; "Don't wrap")             (* ;; "DATE1POS is the position of the first character of INFO1's date, used for tabbing.  We have to measure the filename, date, size, and author if desired")             (IF (CDR CDENTRIES)                 THEN (FOR E INFO1 (MAXDATE1WIDTH _ 0)                                 (SPACEWIDTH _ 1)                                 (PARENWIDTH _ 2) IN (CDR CDENTRIES)                             WHEN (SETQ INFO1 (FETCH INFO1 OF E))                             LARGEST [SETQ MAXDATE1WIDTH (IMAX MAXDATE1WIDTH                                                                   (NCHARS (FETCH DATE                                                                              OF INFO1]                                   (IPLUS (NCHARS (PACKFILENAME 'HOST NIL 'DIRECTORY NIL 'BODY                                                         (FETCH FULLNAME OF INFO1)))                                          (NCHARS (FETCH LENGTH OF INFO1))                                          (CL:IF PRINTAUTHOR                                              (IPLUS SPACEWIDTH PARENWIDTH                                                     (NCHARS (FETCH AUTHOR OF INFO1)))                                              0)) FINALLY                                                         (* ;;                             "First 3 for width of equiv.  $$EXTREME is NIL if there are no INFO1's")                                                        (SETQ DATE1POS (IPLUS (OR $$EXTREME 10)                                                                              3                                                                              (ITIMES 3 SPACEWIDTH)))                                                        (SETQ ENDDATE1 (IPLUS DATE1POS MAXDATE1WIDTH)                                                         ))                       (FOR E IN (CDR CDENTRIES) DO (COMPAREDIRECTORIES.PRINTLINE                                                                 STREAM E PRINTAUTHOR DATE1POS                                                                  ENDDATE1))               ELSE (PRINTOUT T "CDENTRIES is empty" T))             (AND STREAM (CLOSEF? STREAM))))])(COMPAREDIRECTORIES.PRINTLINE  [LAMBDA (STREAM ENTRY PRINTAUTHOR DATE1POS ENDDATE1)  (* ; "Edited 30-Aug-2020 16:57 by rmk:")    (* ;; "Format one line of the directory comparison listing.  If PRINTAUTHOR and AUTHOR1 or AUTHOR2 are non-NIL, list the author in parens; otherwise omit it.")    (LET ((INFO1 (FETCH INFO1 OF ENTRY))          (INFO2 (FETCH INFO2 OF ENTRY)))         (PRINTOUT STREAM (CL:IF (EQ 'EQUIVALENT (FETCH EQUIV OF ENTRY))                              "=="                              "  "))         (CL:WHEN INFO1             (PRINTOUT STREAM (PACKFILENAME 'HOST NIL 'DIRECTORY NIL 'BODY (FETCH FULLNAME                                                                              OF INFO1))                    " ")             (CL:WHEN PRINTAUTHOR                 (PRINTOUT STREAM "(" (FETCH AUTHOR OF INFO1)                        ") "))             (PRINTOUT STREAM (FETCH LENGTH OF INFO1)                    .TAB0 DATE1POS (FETCH DATE OF INFO1)))         (PRINTOUT STREAM .TAB0 ENDDATE1 "  " (FETCH DATEREL OF ENTRY)                "  ")         (CL:WHEN INFO2             (PRINTOUT STREAM (FETCH DATE OF INFO2)                    "   "                    (PACKFILENAME 'HOST NIL 'DIRECTORY NIL 'BODY (FETCH FULLNAME OF INFO2))                    " ")             (CL:WHEN PRINTAUTHOR                 (PRINTOUT STREAM "(" (FETCH AUTHOR OF INFO2)                        ") "))             (PRINTOUT STREAM (FETCH LENGTH OF INFO2)))         (TERPRI STREAM]))(DEFINEQ(CDMAP  [LAMBDA (CDENTRIES FN)                                (* ; "Edited  6-Sep-2020 15:58 by rmk:")    (CL:UNLESS CDENTRIES        (PRINTOUT T T "Note:  Using LASTCDENTRIES" T T)        (SETQ CDENTRIES LASTCDENTRIES))    (FOR CDE MATCHNAME INFO1 DATEREL INFO2 EQUIV IN (CDR CDENTRIES)       DECLARE (SPECVARS MATCHNAME INFO1 DATEREL INFO2 EQUIV)       EACHTIME (SETQ MATCHNAME (FETCH MATCHNAME OF CDE))             (SETQ INFO1 (FETCH INFO1 OF CDE))             (SETQ DATEREL (FETCH DATEREL OF CDE))             (SETQ INFO2 (FETCH INFO2 OF CDE))             (SETQ EQUIV (FETCH EQUIV OF CDE)) DO (APPLY* FN CDE])(CDENTRY  [LAMBDA (MATCHNAME CDENTRIES)                     (* ; "Edited  5-Sep-2020 21:09 by rmk:")    (ASSOC MATCHNAME (OR CDENTRIES LASTCDENTRIES])(CDSUBSET  [LAMBDA (CDENTRIES FN)                                (* ; "Edited  6-Sep-2020 15:58 by rmk:")    (CL:UNLESS CDENTRIES        (PRINTOUT T T "Note:  Using LASTCDENTRIES" T T)        (SETQ CDENTRIES LASTCDENTRIES))    (CONS (CAR CDENTRIES)          (FOR CDE MATCHNAME INFO1 DATEREL INFO2 EQUIV IN (CDR CDENTRIES)             DECLARE (SPECVARS MATCHNAME INFO1 DATEREL INFO2 EQUIV)             EACHTIME (SETQ MATCHNAME (FETCH MATCHNAME OF CDE))                   (SETQ INFO1 (FETCH INFO1 OF CDE))                   (SETQ DATEREL (FETCH DATEREL OF CDE))                   (SETQ INFO2 (FETCH INFO2 OF CDE))                   (SETQ EQUIV (FETCH EQUIV OF CDE)) WHEN (APPLY* FN CDE) COLLECT]))(DEFINEQ(BINCOMP  [LAMBDA (FILE1 FILE2)                                 (* ; "Edited 25-Aug-2020 12:12 by rmk:")    (* ;; "Returns T if FILE1 and FILE2 are byte-equivalent")    (CL:WHEN (IEQP (GETFILEINFO FILE1 'LENGTH)                   (GETFILEINFO FILE2 'LENGTH))        [CL:WITH-OPEN-FILE (STREAM1 FILE1 :DIRECTION :INPUT)               (CL:WITH-OPEN-FILE (STREAM2 FILE2 :DIRECTION :INPUT)                      (SETFILEINFO STREAM1 'ENDOFSTREAMOP (FUNCTION NILL))                      (BIND B1 WHILE (SETQ B1 (\BIN STREAM1))                         UNLESS (EQ B1 (\BIN STREAM2)) DO (RETURN NIL)                         FINALLY (RETURN T])])(EOLTYPE  [LAMBDA (FILE)                                        (* ; "Edited  3-Sep-2020 17:05 by rmk:")    (* ;; "Returns the EOLCONVENTION of FILE if it only sees one kind, NIL if it can't decide.")    (CL:WITH-OPEN-FILE (STREAM FILE :DIRECTION :INPUT)           (SETFILEINFO STREAM 'ENDOFSTREAMOP (FUNCTION NILL))           (BIND EOLTYPE              DO (SELCHARQ (OR (\BIN STREAM)                                   (RETURN EOLTYPE))                          (CR (IF (EQ (CHARCODE LF)                                          (\PEEKBIN STREAM T))                                  THEN (CL:WHEN (MEMB EOLTYPE '(LF CR))                                                  (RETURN NIL))                                        (\BIN STREAM)                                        (SETQ EOLTYPE 'CRLF)                                ELSEIF (MEMB EOLTYPE '(LF CRLF))                                  THEN (RETURN NIL)                                ELSE (SETQ EOLTYPE 'CR)))                          (LF (CL:WHEN (MEMB EOLTYPE '(CR CRLF))                                     (RETURN NIL))                              (SETQ EOLTYPE 'LF))                          NIL]))(DECLARE%: EVAL@COMPILE(RECORD CDENTRY (MATCHNAME INFO1 DATEREL INFO2 . EQUIV))(RECORD CDINFO (FULLNAME DATE LENGTH AUTHOR TYPE)))(* ;; "look for compiled files older than the sources")(DEFINEQ(FIND-UNCOMPILED-FILES  [LAMBDA (FILES DFASLMARGIN)                           (* ; "Edited  8-Sep-2020 21:08 by rmk:")                                                             (* ; "Edited  3-Nov-94 15:17 by jds")    (* ;; "Produces a list of the source files in FILES that have no corresponding compiled file")    (* ;; "This determines whether there is at least one compiled file.  If there are two or more, that's a problem")    (* ;; "We want the most recent version only")    (* ;; "Source files have a 2-element created-as with a non-NIL date")    (SETQ FILES (FOR F IN (OR (LISTP FILES)                                      (FILDIR FILES)) UNLESS (MEMB (SETQ F (PACKFILENAME                                                                                'VERSION NIL                                                                                'BODY F))                                                                       $$VAL) COLLECT F))    (FOR F SCREATION CFILES IN FILES WHEN (AND (CADR (SETQ SCREATION (CREATED-AS                                                                                  F)))                                                           (NOT (CDDR SCREATION)))       WHEN [SETQ CFILES                 (FOR CEXT CF IN *COMPILED-EXTENSIONS*                    WHEN (SETQ CF (INFILEP (PACKFILENAME 'EXTENSION CEXT 'VERSION NIL                                                      'BODY F)))                    COLLECT (CL:WHEN (SOURCEFORCFILEP SCREATION CF DFASLMARGIN)                                       (RETURN NIL))                          CF                    FINALLY                           (* ;; "If we found some compiled files, they weren't on this source.  If there weren't any compiled files to check, maybe there weren't any functions.")                          (* ;;       "NLSETQ because we don't want to stop if there is an error, typically from a package problem")                          (RETURN (OR $$VAL (LET [(FCOMS (CAR (NLSETQ (GETDEF (FILECOMS F)                                                                             'VARS F]                                                 (IF (NULL FCOMS)                                                     THEN                                                            (* ;;                                                "GETDEF caused an error.  Maybe a package problem. ")                                                           'NOCOMMANDS                                                   ELSEIF (INFILECOMS? NIL '(FUNCTIONS FNS)                                                                     FCOMS)                                                     THEN T]       COLLECT (CONS F (SELECTQ CFILES                               (T NIL)                               (NOCOMMANDS (CONS "No commands"))                               (FOR CF IN CFILES                                  COLLECT (LIST CF (IQUOTIENT [IDIFFERENCE                                                                   (IDATE (CADR SCREATION))                                                                   (IDATE (CADDDR (CREATED-AS                                                                                   CF]                                                              (TIMES 60 ONESECOND])(FIND-UNSOURCED-CFILES  [LAMBDA (CFILES DFASLMARGIN)                          (* ; "Edited  8-Sep-2020 23:51 by rmk:")                                                             (* ; "Edited  3-Nov-94 15:17 by jds")    (* ;;   "Produces a list of compiled files for which no source file can be found in the same directory.")    (* ;; "The source date in at least one DFASL was off by a second, maybe some sort of IDATE rounding?  So, give a margin.")    (CL:UNLESS (LISTP CFILES)        (* ;;  "We want the most recent version only.  Check filedate to make sure it really is a compiled file.")        (* ;; "Sort to get lcoms and dfasls next to each other.")        [LET (CCREATEDS)             (SETQ CCREATEDS (FOR CEXT FOUND CCREATED IN *COMPILED-EXTENSIONS*                                JOIN (FOR CF IN [FILDIR (PACKFILENAME 'EXTENSION CEXT                                                                           'BODY                                                                           (OR CFILES '*]                                            WHEN (CDDR (SETQ CCREATED (CREATED-AS CF)))                                            UNLESS (MEMBER CCREATED $$VAL) COLLECT CCREATED))              )             (* ;; "CCREATEDS is now a list of CREATED-AS items")             (FOR CC IN CCREATEDS UNLESS (SOURCEFORCFILEP (PACKFILENAME 'EXTENSION                                                                                  NIL 'VERSION NIL                                                                                 'BODY                                                                                 (CAR CC))                                                            CC DFASLMARGIN) COLLECT (CAR CC)                FINALLY (RETURN (SORT $$VAL (FUNCTION (LAMBDA (CF1 CF2)                                                            (ALPHORDER (FILENAMEFIELD CF1                                                                              'NAME)                                                                   (FILENAMEFIELD CF2 'NAME])])(FIND-SOURCE-FILES  [LAMBDA (CFILES SDIRS DFASLMARGIN)                    (* ; "Edited  8-Sep-2020 22:50 by rmk:")    (* ;; "Returns (CFILE . SFILES) pairs where CFILE is a Lisp compiled file in CFILES SFILES is a list of source files in SDIRS that CFILE was compiled on.")    (* ;; "This suggests that one of CFILES should be copied to the SFILE directory.")    (SETQ SDIRS (FOR SD INSIDE (OR SDIRS T) COLLECT (DIRECTORYNAME SD)))    (SORT (FOR CF SFILES CNAME CCREATED IN (OR (LISTP CFILES)                                                       (FILDIR CFILES))             WHEN (AND (SETQ CNAME (INFILEP CF))                           (CDDR (SETQ CCREATED (CREATED-AS CF)))                           (SETQ SFILES (FOR SD SF IN SDIRS                                           WHEN (AND (SETQ SF (INFILEP (PACKFILENAME                                                                            'NAME                                                                            (FILENAMEFIELD                                                                             CF                                                                             'NAME)                                                                            'BODY SD)))                                                         (SOURCEFORCFILEP SF CCREATED DFASLMARGIN                                                                )) COLLECT SF)))             COLLECT (CONS CNAME SFILES))          (FUNCTION (LAMBDA (P1 P2)                      (ALPHORDER (FILENAMEFIELD (CAR P1))                             (FILENAMEFIELD (CAR P2])(FIND-COMPILED-FILES  [LAMBDA (SFILES CDIRS DFASLMARGIN)                    (* ; "Edited  8-Sep-2020 22:03 by rmk:")    (* ;; "Returns (SFILE . CFILES) pairs where SFILE is a Lisp source file in SFILES CFILES is a list of compiled files in CDIRS that were compiled on SFILE.")    (* ;; "FILEDATE is true for source files and compiled files")    (* ;; "This suggests that one of CFILES should be copied to the SFILE directory.")    (SETQ CDIRS (FOR CD INSIDE (OR CDIRS T) COLLECT (DIRECTORYNAME CD)))    (SORT (FOR SF CFILES SNAME SCREATED IN (OR (LISTP SFILES)                                                       (FILDIR SFILES))             WHEN [AND (SETQ SNAME (INFILEP SF))                           (SETQ SCREATED (CREATED-AS SF))                           (NOT (CDDR SCREATED))                           (SETQ CFILES (FOR CEXT (ROOT _ (FILENAMEFIELD SNAME 'NAME))                                           IN *COMPILED-EXTENSIONS*                                           JOIN (FOR CD CF IN CDIRS                                                       WHEN (AND (SETQ CF                                                                      (INFILEP (PACKFILENAME                                                                                'NAME ROOT                                                                                'EXTENSION CEXT                                                                                'BODY CD)))                                                                     (SOURCEFORCFILEP SCREATED CF                                                                            DFASLMARGIN))                                                       COLLECT CF] COLLECT (CONS SNAME CFILES                                                                                         ))          (FUNCTION (LAMBDA (P1 P2)                      (ALPHORDER (FILENAMEFIELD (CAR P1))                             (FILENAMEFIELD (CAR P2]))(DEFINEQ(CREATED-AS  [LAMBDA (FILE)                                        (* ; "Edited  8-Sep-2020 15:42 by rmk:")    (* ;; "For lisp source files, returns (filecreatename filecreateddate)")    (* ;; "For lisp compiled files, returns (cfilename cfiledate sfilecreatename sfilecreateddate)")    (* ;; "For other files, (fullfilename NIL)")    (* ;; "The cfilename is just the current directory name for DFASLs.")    (* ;; "So:  (CADR value) is non-NIL for Lisp files.  Of those, (CDDR value) is non-NIL for compiled files.")    (CL:WITH-OPEN-FILE     (STREAM FILE :DIRECTION :INPUT)     (LET (FILEDATE FILENAME SOURCEDATE SOURCENAME LINE POS)          [IF (EQ (CHARCODE %()                      (SKIPSEPRCODES STREAM))              THEN                                       (* ; "Managed source or LCOM")                    [LET (FORM SFORM RDTBL)                         (CL:WHEN (AND [EQ 'DEFINE-FILE-INFO (CAR (SETQ FORM (READ STREAM]                                       (EQ (CHARCODE %()                                           (SKIPSEPRCODES STREAM)))                             (SETQ RDTBL (FIND-READTABLE (LISTGET (CDR FORM)                                                                :READTABLE)))                             (SETQ FORM (READ STREAM RDTBL)))                         (CL:WHEN (EQ 'FILECREATED (CAR FORM))                             (IF [STREQUAL "compiled on " (CAR (LISTP (CADDR FORM]                                 THEN                    (* ; "LCOM, get source info")                                       (IF [AND (EQ (CHARCODE %()                                                        (SKIPSEPRCODES STREAM))                                                    (EQ 'FILECREATED (CAR (SETQ SFORM                                                                           (READ STREAM RDTBL]                                           THEN (SETQ FILENAME (FULLNAME STREAM))                                                 (SETQ FILEDATE (CADR FORM))                                                 (SETQ SOURCENAME (CADDR SFORM))                                                 (SETQ SOURCEDATE (CADR SFORM))                                         ELSE (SETQ FILENAME (FULLNAME STREAM))                                               (SETQ FILEDATE (CADR FORM)))                               ELSE (SETQ FILENAME (CADDR FORM))                                     (SETQ FILEDATE (CADR FORM))))]            ELSEIF (SETQ POS (STRPOS "XCL Compiler output for source file " (SETQ LINE                                                                                 (CL:READ-LINE STREAM                                                                                        ))                                        1 NIL NIL T))              THEN                                       (* ; "DFASL compiled?")                    (SETQ SOURCENAME (SUBATOM LINE POS))                    (CL:WHEN (SETQ POS (STRPOS "Source file created " (SETQ LINE (CL:READ-LINE STREAM                                                                                        ))                                              1 NIL NIL T))                        [SETQ SOURCEDATE (GDATE (IDATE (SUBSTRING LINE POS]                        (CL:WHEN (SETQ POS (STRPOS "FASL file created " (SETQ LINE (CL:READ-LINE                                                                                    STREAM))                                                  1 NIL NIL T))                            [SETQ FILEDATE (GDATE (IDATE (SUBSTRING LINE POS]))]          `(,(OR FILENAME (FULLNAME STREAM))            ,FILEDATE            ,@(CL:WHEN SOURCENAME (LIST SOURCENAME SOURCEDATE])(SOURCEFORCFILEP  [LAMBDA (SOURCECREATED COMPILEDCREATED DFASLMARGIN)   (* ; "Edited  8-Sep-2020 21:51 by rmk:")    (* ;; "There seems to be some variation between the source dates in dfasl files and the filecreated date in the sources, they often don't match exactly.  But if they are within MARGIN (defaults to 2 minutes), we assume a match.  We require exact date match for LCOMS")    (CL:UNLESS (LISTP SOURCECREATED)        (SETQ SOURCECREATED (CREATED-AS SOURCECREATED)))    (CL:UNLESS (LISTP COMPILEDCREATED)        (SETQ COMPILEDCREATED (CREATED-AS COMPILEDCREATED)))    (OR (EQUAL (CAR SOURCECREATED)               (CADDR COMPILEDCREATED))        (EQUAL (CADR SOURCECREATED)               (CADDDR COMPILEDCREATED))        (AND [EQ 'DFASL (U-CASE (FILENAMEFIELD (CAR COMPILEDCREATED)                                       'EXTENSION]             (LESSP [FABS (IDIFFERENCE (IDATE (CADR SOURCECREATED))                                 (IDATE (CADDDR COMPILEDCREATED]                    (TIMES (OR DFASLMARGIN 2)                           60 ONESECOND]))(DEFINEQ(FIX-DIRECTORY-DATES  [LAMBDA (FILES)                                       (* ; "Edited  6-Sep-2020 15:08 by rmk:")    (* ;; "For Lisp source and compiled files, ensures that the directory file date corresponds to the  filecreated date. Returns the list of files whose dates were changed.")    (* ;; "This allows for the fact that directory dates that  are no later than, say, 30 seconds of the filecreated date are probably OK--the directory date may be set when the file is closed.")    (* ;; "Use IDATEs in case FDCDATE is not Y2K.")    (* ;; "Stop if directory date is more than 2 minutes earlier than the filecreated date.  Earlier could be because the dates are asserted at different points in the filing process.  But 2 minutes is worth thinking about.  Returning from HELP will get them aligned.")    (FOR F DIDATE FCDATE IN (OR (LISTP FILES)                                        (FILDIR FILES)) WHEN (SETQ FCDATE (FILEDATE F))       UNLESS (IEQP (SETQ DIDATE (GETFILEINFO F 'ICREATIONDATE))                        (SETQ FCDATE (IDATE FCDATE))) COLLECT (CL:WHEN (IGREATERP (IDIFFERENCE                                                                                       FCDATE DIDATE)                                                                                  (ITIMES 120                                                                                          ONESECOND))                                                                      (HELP                                                        "DIRECTORY DATE EARLIER THAN FILECREATED DATE"                                                                            (LIST F (GDATE DIDATE)                                                                                  (GDATE FCDATE))))                                                            (SETFILEINFO F 'ICREATIONDATE FCDATE)                                                            F])(FIX-EQUIV-DATES  [LAMBDA (CDENTRIES)                                   (* ; "Edited  1-Sep-2020 16:21 by rmk:")    (* ;; "For every entry whose files are EQUIVALENT and whose filedates are different, sets the directory of the file with the later date to be the date of the one with the earlier date.  This preumes that the later one must have been a copy. ")    (CL:UNLESS CDENTRIES        (PRINTOUT T "Note:  Using LASTCDENTRIES" T)        (SETQ CDENTRIES LASTCDENTRIES))    (FOR CDE EARLY LATE IN (CDR CDENTRIES) WHEN (FETCH EQUIV OF CDE)       UNLESS (EQ '= (FETCH DATEREL OF CDE))       COLLECT (SELECTQ (FETCH DATEREL OF CDE)                       (> (SETQ EARLY (FETCH INFO2 OF CDE))                          (SETQ LATE (FETCH INFO1 OF CDE)))                       (< (SETQ EARLY (FETCH INFO1 OF CDE))                          (SETQ LATE (FETCH INFO2 OF CDE)))                       (SHOULDNT))             (SETFILEINFO (FETCH FULLNAME OF LATE)                    'ICREATIONDATE                    (GETFILEINFO (FETCH FULLNAME OF EARLY)                           'ICREATIONDATE))             (FETCH FULLNAME OF LATE])(COPY-COMPARED-FILES  [LAMBDA (CDENTRIES TARGET MATCHNAMES)                 (* ; "Edited  1-Sep-2020 16:20 by rmk:")    (* ;; "Copies source files to target files whose matchname belongs to MATCHNAMES, if given.")    (* ;; "TARGET is 1 or 2, indicating which side of the CD entry is the target.  Value is the list of matchnames whose files have been copied.")    (* ;; "Directory filedates and other properties are preserved.")    (CL:UNLESS (MEMB TARGET '(1 2))           (ERROR "INVALID TARGET" TARGET))    (CL:UNLESS CDENTRIES        (PRINTOUT T "Note:  Using LASTCDENTRIES" T)        (SETQ CDENTRIES LASTCDENTRIES))    (SETQ MATCHNAMES (MKLIST MATCHNAMES))    (FOR CDE SINFO TINFO MATCHNAME IN (CDR CDENTRIES) EACHTIME (SETQ SINFO                                                                            (FETCH INFO1                                                                               OF CDE))                                                                    (SETQ TINFO (FETCH INFO2                                                                                   OF CDE))                                                                    (CL:WHEN (EQ TARGET 1)                                                                           (SWAP SINFO TINFO))                                                                    (SETQ MATCHNAME                                                                     (FETCH MATCHNAME                                                                        OF CDE))       WHEN (AND (FETCH FULLNAME OF SINFO)                     (FETCH FULLNAME OF TINFO)) UNLESS (AND MATCHNAMES                                                                        (NOT (MEMB MATCHNAME                                                                                    MATCHNAMES)))       COLLECT (COPYFILE (FETCH FULLNAME OF SINFO)                          (PACKFILENAME 'VERSION NIL 'BODY (FETCH FULLNAME OF TINFO)))             MATCHNAME])(COPY-MISSING-FILES  [LAMBDA (CDENTRIES TARGET MATCHNAMES)                 (* ; "Edited  1-Sep-2020 16:21 by rmk:")    (* ;; "Copies source files to target files whose matchname belongs to MATCHNAMES, if given.")    (* ;; "TARGET is 1 or 2, indicating which side of the CD entry is the target.  Value is the list of matchnames whose files have been copied.")    (* ;; "Directory filedates and other properties are preserved.")    (CL:UNLESS (MEMB TARGET '(1 2))           (ERROR "INVALID TARGET" TARGET))    (CL:UNLESS CDENTRIES        (PRINTOUT T "Note:  Using LASTCDENTRIES" T)        (SETQ CDENTRIES LASTCDENTRIES))    (CL:UNLESS (STRINGP (CADR (CAR CDENTRIES)))        (ERROR "(CAR CDENTRIES) IS NOT A VALID PARAMETER LIST" (CAR CDENTRIES)))    (SETQ MATCHNAMES (MKLIST MATCHNAMES))    (FOR CDE SINFO TINFO TDIR MATCHNAME (TDIR _ (CL:IF (EQ TARGET 1)                                                        (CAAR CDENTRIES)                                                        (CADAR CDENTRIES))) IN (CDR CDENTRIES)       EACHTIME (SETQ MATCHNAME (FETCH MATCHNAME OF CDE))             (SETQ SINFO (FETCH INFO1 OF CDE))             (SETQ TINFO (FETCH INFO2 OF CDE))             (CL:WHEN (EQ TARGET 1)                    (SWAP SINFO TINFO)) WHEN (AND (FETCH FULLNAME OF SINFO)                                                          (NOT (FETCH FULLNAME OF TINFO)))       UNLESS (AND MATCHNAMES (NOT (MEMB MATCHNAME MATCHNAMES)))       COLLECT              (* ;; "Using the source fullname in the target should preserve the version number")             (COPYFILE (FETCH FULLNAME OF SINFO)                    (PACKFILENAME 'BODY TDIR 'BODY (FETCH FULLNAME OF SINFO)))             MATCHNAME])(COMPILED-ON-SAME-SOURCE  [LAMBDA (CDENTRIES)                                   (* ; "Edited  1-Sep-2020 16:19 by rmk:")    (* ;; "Returms a subset of CDENTRIES consisting of files that are compiled on the same source (i.e. their source-dates are the same). Preserves the header.")    (* ;; "IDATE in case Y2K")    (* ;; "The source date in at least one DFASL was off by a second, maybe some sort of IDATE rounding?  So, give 2 second margin on the match.")    (CL:UNLESS CDENTRIES        (PRINTOUT T "Note:  Using LASTCDENTRIES" T)        (SETQ CDENTRIES LASTCDENTRIES))    (CONS (CAR CDENTRIES)          (FOR CDE IN (CDR CDENTRIES)             WHEN (AND (EQ 'COMPILED (FETCH TYPE OF (FETCH INFO1 OF CDE)))                           (EQ 'COMPILED (FETCH TYPE OF (FETCH INFO2 OF CDE)))                           (ILEQ [IABS (IDIFFERENCE (IDATE (FILEDATE (FETCH FULLNAME                                                                        OF (FETCH INFO1                                                                                  OF CDE))                                                                  T))                                              (IDATE (FILEDATE (FETCH FULLNAME                                                                  OF (FETCH INFO2                                                                            OF CDE))                                                            T]                                 (ITIMES 2 ONESECOND))) COLLECT CDE]))(RPAQ ONESECOND (IDIFFERENCE (IDATE "1-Jan-2020 12:00:01")                           (IDATE "1-Jan-2020 12:00:00")))(RPAQ? LASTCDENTRIES NIL)(DEFINEQ(COMPARE-ENTRY-SOURCE-FILES  [LAMBDA (CDENTRY LISTSTREAM EXAMINE DW?)              (* ; "Edited 30-Aug-2020 12:22 by rmk:")    (* ;; "Wrapper to call COMPARESOURCES on the Lisp source files of CDENTRY")    (CL:WHEN [AND (EQ 'SOURCE (FETCH TYPE OF (FETCH INFO1 OF CDENTRY)))                  (EQ 'SOURCE (FETCH TYPE OF (FETCH INFO2 OF CDENTRY]        (COMPARESOURCES (FETCH FULLNAME OF (FETCH INFO1 OF CDENTRY))               (FETCH FULLNAME OF (FETCH INFO2 OF CDENTRY))               EXAMINE DW? LISTSTREAM))]))(FILESLOAD COMPARESOURCES)(PUTPROPS COMPAREDIRECTORIES COPYRIGHT ("Venue & Xerox Corporation" 1985 1986 1987 1988 1990 1994 1998 2018 2020))(DECLARE%: DONTCOPY  (FILEMAP (NIL (1592 12916 (COMPAREDIRECTORIES 1602 . 8639) (CDFILES 8641 . 11018) (COMPAREDIRECTORIES.INFOS 11020 . 12479) (MATCHNAME 12481 . 12914)) (12917 19376 (CDPRINT 12927 . 17750) (COMPAREDIRECTORIES.PRINTLINE 17752 . 19374)) (19377 21039 (CDMAP 19387 . 20083) (CDENTRY 20085 . 20253) (CDSUBSET 20255 . 21037)) (21040 22966 (BINCOMP 21050 . 21734) (EOLTYPE 21736 . 22964)) (23175 32672 (FIND-UNCOMPILED-FILES 23185 . 26687) (FIND-UNSOURCED-CFILES 26689 . 28890) (FIND-SOURCE-FILES 28892 . 30590) (FIND-COMPILED-FILES 30592 . 32670)) (32673 37598 (CREATED-AS 32683 . 36495) (SOURCEFORCFILEP 36497 . 37596)) (37599 46455 (FIX-DIRECTORY-DATES 37609 . 39605) (FIX-EQUIV-DATES 39607 . 40867) (COPY-COMPARED-FILES 40869 . 42993) (COPY-MISSING-FILES 42995 . 44834) (COMPILED-ON-SAME-SOURCE 44836 . 46453)) (46610 47221 (COMPARE-ENTRY-SOURCE-FILES 46620 . 47219)))))STOP